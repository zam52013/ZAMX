<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\FM-Base.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\FM-Base.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Wed Jul 18 18:07:15 2018
<BR><P>
<H3>Maximum Stack Usage =       2612 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
rtcm_task &rArr; qxwz_tick &rArr; qxwz_ntrip_tick &rArr; qxwz_ntrip_connect &rArr; qxwz_ntrip_send_header &rArr; ntrip_auth_sign &rArr; qxwz_api_sign &rArr; qxwz_sign_sha384 &rArr; isc_hmacsha384_init &rArr; isc_sha384_final &rArr; isc_sha512_last &rArr; isc_sha512_transform
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[d2]">__user_initial_stackheap</a>
 <LI><a href="#[11d]">OS_CPU_SR_Save</a>
 <LI><a href="#[120]">OS_CPU_SR_Restore</a>
 <LI><a href="#[12c]">OSStartHighRdy</a>
 <LI><a href="#[141]">OSCtxSw</a>
 <LI><a href="#[11f]">OSIntCtxSw</a>
 <LI><a href="#[2b]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3f]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">ADC_IRQHandler</a><BR>
 <LI><a href="#[1f2]">gsm_ack_exception</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f3]">qxwz_soc_error</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3f]">ADC_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[27]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[41]">CAN1_RX0_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[42]">CAN1_RX1_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[43]">CAN1_SCE_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[40]">CAN1_TX_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[6d]">CAN2_RX0_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[6e]">CAN2_RX1_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[6f]">CAN2_SCE_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[6c]">CAN2_TX_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[7c]">CRYP_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[7b]">DCMI_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[38]">DMA1_Stream0_IRQHandler</a> from iic.o(i.DMA1_Stream0_IRQHandler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[39]">DMA1_Stream1_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[3a]">DMA1_Stream2_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[3b]">DMA1_Stream3_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[3c]">DMA1_Stream4_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[3d]">DMA1_Stream5_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[3e]">DMA1_Stream6_IRQHandler</a> from iic.o(i.DMA1_Stream6_IRQHandler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[5c]">DMA1_Stream7_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[85]">DMA2D_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[65]">DMA2_Stream0_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[66]">DMA2_Stream1_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[67]">DMA2_Stream2_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[68]">DMA2_Stream3_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[69]">DMA2_Stream4_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[71]">DMA2_Stream5_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[72]">DMA2_Stream6_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[73]">DMA2_Stream7_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[2a]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[6a]">ETH_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[6b]">ETH_WKUP_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[33]">EXTI0_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[55]">EXTI15_10_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[34]">EXTI1_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[35]">EXTI2_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[36]">EXTI3_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[37]">EXTI4_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[44]">EXTI9_5_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[31]">FLASH_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[5d]">FMC_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[7e]">FPU_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[7d]">HASH_RNG_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[25]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[4d]">I2C1_ER_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[4c]">I2C1_EV_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[4f]">I2C2_ER_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[4e]">I2C2_EV_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[76]">I2C3_ER_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[75]">I2C3_EV_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[26]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[24]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[88]">OSTaskSwHook</a> from os_cpu_c.o(i.OSTaskSwHook) referenced from os_cpu_a.o(.text)
 <LI><a href="#[8f]">OSTmr_Task</a> from os_tmr.o(i.OSTmr_Task) referenced from os_tmr.o(i.OSTmr_InitTask)
 <LI><a href="#[90]">OS_TaskIdle</a> from os_core.o(i.OS_TaskIdle) referenced from os_core.o(i.OS_InitTaskIdle)
 <LI><a href="#[8e]">OS_TaskReturn</a> from os_task.o(i.OS_TaskReturn) referenced from os_cpu_c.o(i.OSTaskStkInit)
 <LI><a href="#[91]">OS_TaskStat</a> from os_core.o(i.OS_TaskStat) referenced from os_core.o(i.OS_InitTaskStat)
 <LI><a href="#[70]">OTG_FS_IRQHandler</a> from usbh_usr.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[57]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[78]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[77]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[7a]">OTG_HS_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[79]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[2e]">PVD_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[2b]">PendSV_Handler</a> from os_cpu_a.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[20]">RCC_AHB1PeriphClockCmd</a> from stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd) referenced 668 times from iic.o(.data)
 <LI><a href="#[1f]">RCC_APB1PeriphClockCmd</a> from stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd) referenced 176 times from iic.o(.data)
 <LI><a href="#[21]">RCC_APB1PeriphResetCmd</a> from stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd) referenced 20 times from iic.o(.data)
 <LI><a href="#[22]">RCC_APB2PeriphClockCmd</a> from stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd) referenced 112 times from uart.o(.data)
 <LI><a href="#[32]">RCC_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[56]">RTC_Alarm_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[30]">RTC_WKUP_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[23]">Reset_Handler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[84]">SAI1_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[5e]">SDIO_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[50]">SPI1_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[51]">SPI2_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[60]">SPI3_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[81]">SPI4_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[82]">SPI5_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[83]">SPI6_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[29]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[2c]">SysTick_Handler</a> from times.o(i.SysTick_Handler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[86]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f427x.o(.text)
 <LI><a href="#[2f]">TAMP_STAMP_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[45]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[48]">TIM1_CC_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[47]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[46]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[49]">TIM2_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[4a]">TIM3_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[4b]">TIM4_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[5f]">TIM5_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[63]">TIM6_DAC_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[64]">TIM7_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[58]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[5b]">TIM8_CC_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[5a]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[59]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[61]">UART4_IRQHandler</a> from esp32.o(i.UART4_IRQHandler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[62]">UART5_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[7f]">UART7_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[80]">UART8_IRQHandler</a> from rtk_base.o(i.UART8_IRQHandler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[52]">USART1_IRQHandler</a> from socket.o(i.USART1_IRQHandler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[53]">USART2_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[54]">USART3_IRQHandler</a> from rtk_base.o(i.USART3_IRQHandler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[74]">USART6_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[1b]">USBH_Connected</a> from usbh_core.o(i.USBH_Connected) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[1c]">USBH_Disconnected</a> from usbh_core.o(i.USBH_Disconnected) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[18]">USBH_MSC_ClassRequest</a> from usbh_msc_core.o(i.USBH_MSC_ClassRequest) referenced 2 times from usbh_msc_core.o(.data)
 <LI><a href="#[19]">USBH_MSC_Handle</a> from usbh_msc_core.o(i.USBH_MSC_Handle) referenced 2 times from usbh_msc_core.o(.data)
 <LI><a href="#[17]">USBH_MSC_InterfaceDeInit</a> from usbh_msc_core.o(i.USBH_MSC_InterfaceDeInit) referenced 2 times from usbh_msc_core.o(.data)
 <LI><a href="#[16]">USBH_MSC_InterfaceInit</a> from usbh_msc_core.o(i.USBH_MSC_InterfaceInit) referenced 2 times from usbh_msc_core.o(.data)
 <LI><a href="#[1e]">USBH_PortDisabled</a> from usbh_core.o(i.USBH_PortDisabled) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[1d]">USBH_PortEnabled</a> from usbh_core.o(i.USBH_PortEnabled) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[1a]">USBH_SOF</a> from usbh_core.o(i.USBH_SOF) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[d]">USBH_USR_Configuration_DescAvailable</a> from usbh_usr.o(i.USBH_USR_Configuration_DescAvailable) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[5]">USBH_USR_DeInit</a> from usbh_usr.o(i.USBH_USR_DeInit) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[c]">USBH_USR_DeviceAddressAssigned</a> from usbh_usr.o(i.USBH_USR_DeviceAddressAssigned) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[6]">USBH_USR_DeviceAttached</a> from usbh_usr.o(i.USBH_USR_DeviceAttached) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[8]">USBH_USR_DeviceDisconnected</a> from usbh_usr.o(i.USBH_USR_DeviceDisconnected) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[14]">USBH_USR_DeviceNotSupported</a> from usbh_usr.o(i.USBH_USR_DeviceNotSupported) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[a]">USBH_USR_DeviceSpeedDetected</a> from usbh_usr.o(i.USBH_USR_DeviceSpeedDetected) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[b]">USBH_USR_Device_DescAvailable</a> from usbh_usr.o(i.USBH_USR_Device_DescAvailable) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[11]">USBH_USR_EnumerationDone</a> from usbh_usr.o(i.USBH_USR_EnumerationDone) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[4]">USBH_USR_Init</a> from usbh_usr.o(i.USBH_USR_Init) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[13]">USBH_USR_MSC_Application</a> from usbh_usr.o(i.USBH_USR_MSC_Application) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[e]">USBH_USR_Manufacturer_String</a> from usbh_usr.o(i.USBH_USR_Manufacturer_String) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[9]">USBH_USR_OverCurrentDetected</a> from usbh_usr.o(i.USBH_USR_OverCurrentDetected) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[f]">USBH_USR_Product_String</a> from usbh_usr.o(i.USBH_USR_Product_String) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[7]">USBH_USR_ResetDevice</a> from usbh_usr.o(i.USBH_USR_ResetDevice) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[10]">USBH_USR_SerialNum_String</a> from usbh_usr.o(i.USBH_USR_SerialNum_String) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[15]">USBH_USR_UnrecoveredError</a> from usbh_usr.o(i.USBH_USR_UnrecoveredError) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[12]">USBH_USR_UserInput</a> from usbh_usr.o(i.USBH_USR_UserInput) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[28]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[2d]">WWDG_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[9b]">__main</a> from __main.o(!!!main) referenced from startup_stm32f427x.o(.text)
 <LI><a href="#[8d]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[8b]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[8a]">_snputc</a> from _snputc.o(.text) referenced from noretval__2snprintf.o(.text)
 <LI><a href="#[89]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[99]">esp_date_task</a> from main.o(i.esp_date_task) referenced from main.o(i.start_task)
 <LI><a href="#[8c]">fputc</a> from uart.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[96]">key_task</a> from main.o(i.key_task) referenced from main.o(i.start_task)
 <LI><a href="#[95]">led_task</a> from main.o(i.led_task) referenced from main.o(i.start_task)
 <LI><a href="#[97]">oem_rtcm_task</a> from main.o(i.oem_rtcm_task) referenced from main.o(i.start_task)
 <LI><a href="#[93]">qxwz_ntrip_on_data_received</a> from ntrip.o(i.qxwz_ntrip_on_data_received) referenced from ntrip.o(i.qxwz_ntrip_connect)
 <LI><a href="#[9a]">rtcm_task</a> from main.o(i.rtcm_task) referenced from main.o(i.start_task)
 <LI><a href="#[98]">rtk_date_task</a> from main.o(i.rtk_date_task) referenced from main.o(i.start_task)
 <LI><a href="#[92]">start_task</a> from main.o(i.start_task) referenced from main.o(i.main)
 <LI><a href="#[94]">tickit_task</a> from main.o(i.tickit_task) referenced from main.o(i.start_task)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[9c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[9e]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[237]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[238]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[239]"></a>__decompress</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[23a]"></a>__decompress2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[23b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[9f]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c1]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[a1]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a2]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[a4]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[23c]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[ae]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[a6]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[23d]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[23e]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[23f]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[240]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[241]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[242]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[243]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[244]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[245]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[246]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[247]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[248]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[249]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[24a]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[24b]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[24c]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[24d]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[24e]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[24f]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[250]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[b3]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[251]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[252]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[253]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[254]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[255]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[256]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[257]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[9d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[258]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[ab]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ad]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[259]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[af]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25a]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[d3]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[b2]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[25b]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[b4]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[23]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f427x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[11d]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[120]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[12c]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[141]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[11f]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[2b]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[25c]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[201]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_sha512_update
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_sha512_last
</UL>

<P><STRONG><a name="[25d]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_UserInput
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_UnrecoveredError
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_SerialNum_String
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_ResetDevice
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Product_String
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_OverCurrentDetected
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Manufacturer_String
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_MSC_Application
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_EnumerationDone
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Device_DescAvailable
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceSpeedDetected
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceNotSupported
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceDisconnected
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceAttached
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceAddressAssigned
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Configuration_DescAvailable
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_soc_send
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reg
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_uart_buff
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OEM_RTK_BASE
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OEM_Init_output
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_send_complete
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_error
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_connect_complete
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_on_soc_data_received
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_creg
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_send
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_create
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_connect
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_close
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_uart_buf
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gsm_gprs
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gsm_ack_exception
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_on_data_received
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_send_header
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_handle_data
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_connect
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntrip_auth_sign
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_getcallback
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_tick
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_tick
</UL>

<P><STRONG><a name="[b8]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_soc_send
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_send
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_connect
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_sign_sha384
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_api_sign
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_send_header
</UL>

<P><STRONG><a name="[ba]"></a>__2snprintf</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, noretval__2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_send_header
</UL>

<P><STRONG><a name="[bc]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[bd]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[bb]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[a0]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[a3]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[25e]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[c2]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_uart_buff
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_uart_buf
</UL>

<P><STRONG><a name="[e7]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_send_comd
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_find_string
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_uart_buff
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_find_string
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_uart_buf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_string
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_handle_data
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_date_task
</UL>

<P><STRONG><a name="[207]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_send_complete
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_error
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_connect_complete
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_on_soc_data_received
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_on_data_received
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_send_header
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_handle_data
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_connect
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntrip_auth_sign
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_getcallback
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_tick
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_tick
</UL>

<P><STRONG><a name="[20c]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_connect_complete
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_sign_sha384
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_api_sign
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_send_header
</UL>

<P><STRONG><a name="[20b]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_api_sign
</UL>

<P><STRONG><a name="[1fc]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_on_soc_data_received
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_send_header
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntrip_auth_sign
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_sha512_update
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_hmacsha384_sign
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_hmacsha384_init
</UL>

<P><STRONG><a name="[c5]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[25f]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_sha384_init
</UL>

<P><STRONG><a name="[260]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_hmacsha384_sign
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_hmacsha384_init
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Esp_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clean_ESP_date
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_cmd_buff
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_BASE_Init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_error
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buf
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_send_header
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_tick
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtk_date_task
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_sha512_last
</UL>

<P><STRONG><a name="[c9]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[c8]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[14b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_soc_send
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_BASE_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_send_cmd
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_send
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_connect
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_sign_sha384
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_api_sign
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_send_header
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntrip_auth_sign
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_sha512_last
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_sha384_init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_sha384_final
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_hmacsha384_sign
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_hmacsha384_init
</UL>

<P><STRONG><a name="[263]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[20a]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_recv_exception
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_uart_buf
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_api_sign
</UL>

<P><STRONG><a name="[265]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[268]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[26a]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b9]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[89]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> noretval__2snprintf.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[cc]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[a5]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[b7]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[c4]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[26c]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[26d]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[cf]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[cd]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[ac]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[a9]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[d0]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[b1]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[27]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[208]"></a>CRC_Octets</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, crc24.o(i.CRC_Octets))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CRC_Octets
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oem_rtcm_task
</UL>

<P><STRONG><a name="[d4]"></a>Clean_ESP_date</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, esp32.o(i.Clean_ESP_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clean_ESP_date
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_date_task
</UL>

<P><STRONG><a name="[38]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, iic.o(i.DMA1_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA1_Stream0_IRQHandler &rArr; DMA_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, iic.o(i.DMA1_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA1_Stream6_IRQHandler &rArr; DMA_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>DMA_ClearFlag</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[15f]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[162]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_FlowControllerConfig))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[e1]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32f4xx_dma.o(i.DMA_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[161]"></a>DMA_ITConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[160]"></a>DMA_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[2a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[ec]"></a>Fram_read</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, fm25v.o(i.Fram_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Fram_read &rArr; stm32_spi2select
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi2select
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task
</UL>

<P><STRONG><a name="[f0]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init_Cs
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
</UL>

<P><STRONG><a name="[164]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
</UL>

<P><STRONG><a name="[f2]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Detect
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_Read_Input
</UL>

<P><STRONG><a name="[f6]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadOutputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_Write
</UL>

<P><STRONG><a name="[f5]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_Write
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi3select
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi2select
</UL>

<P><STRONG><a name="[f4]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_Write
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi3select
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi2select
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init_Cs
</UL>

<P><STRONG><a name="[179]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Init
</UL>

<P><STRONG><a name="[f7]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_Write
</UL>

<P><STRONG><a name="[ef]"></a>GPIOx_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpio.o(i.GPIOx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIOx_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
</UL>

<P><STRONG><a name="[f1]"></a>GPIOx_Read_Input</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio.o(i.GPIOx_Read_Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOx_Read_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
</UL>

<P><STRONG><a name="[f3]"></a>GPIOx_Write</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, gpio.o(i.GPIOx_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIOx_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Out
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[19a]"></a>HCD_GetCurrentFrame</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_GetCurrentFrame))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[1c4]"></a>HCD_GetCurrentSpeed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usb_hcd.o(i.HCD_GetCurrentSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCD_GetCurrentSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[199]"></a>HCD_GetURB_State</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_GetURB_State))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[1a7]"></a>HCD_GetXferCnt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_GetXferCnt))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DecodeCSW
</UL>

<P><STRONG><a name="[f8]"></a>HCD_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usb_hcd.o(i.HCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HCD_Init &rArr; USB_OTG_CoreInitHost &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; USB_OTG_BSP_uDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SelectCore
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableGlobalInt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DisableGlobalInt
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[1a6]"></a>HCD_IsDeviceConnected</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_IsDeviceConnected))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_TestUnitReady
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RequestSense
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ReadCapacity10
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ModeSense6
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DecodeCSW
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write10
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read10
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UDISK_Write
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UDISK_Status
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UDISK_Read
</UL>

<P><STRONG><a name="[1c3]"></a>HCD_IsPortEnabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_IsPortEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[ff]"></a>HCD_ResetPort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_hcd.o(i.HCD_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HCD_ResetPort &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; USB_OTG_BSP_uDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[101]"></a>HCD_SubmitRequest</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usb_hcd.o(i.HCD_SubmitRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkReceiveData
</UL>

<P><STRONG><a name="[25]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_GenerateSTOP))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f4xx_i2c.o(i.I2C_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>Key_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, key.o(i.Key_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Key_Init &rArr; GPIOx_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>Key_Scan</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, key.o(i.Key_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_Scan &rArr; GPIOx_Read_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_Read_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_task
</UL>

<P><STRONG><a name="[105]"></a>LED_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LED_Init &rArr; GPIOx_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_Write
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>LED_Out</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, led.o(i.LED_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_Out &rArr; GPIOx_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_date_task
</UL>

<P><STRONG><a name="[107]"></a>MPU9250_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mpu9250.o(i.MPU9250_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MPU9250_Init &rArr; SPIx_Init_Cs &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init_Cs
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu9250_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[10a]"></a>Mpu9250_Write_Reg</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mpu9250.o(i.Mpu9250_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Mpu9250_Write_Reg &rArr; stm32_spi3select
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi3select
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init
</UL>

<P><STRONG><a name="[24]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[17d]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Init
</UL>

<P><STRONG><a name="[203]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10c]"></a>OEM_Init_output</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, rtk_base.o(i.OEM_Init_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OEM_Init_output &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_send_cmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtk_date_task
</UL>

<P><STRONG><a name="[10f]"></a>OEM_RTK_BASE</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, rtk_base.o(i.OEM_RTK_BASE))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OEM_RTK_BASE &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_send_cmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_date_task
</UL>

<P><STRONG><a name="[110]"></a>OSInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>OSInitHookBegin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookBegin))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[11b]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookEnd))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[173]"></a>OSIntEnter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(i.OSIntEnter))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[11c]"></a>OSIntExit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[121]"></a>OSSchedLock</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_core.o(i.OSSchedLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSSchedLock
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[122]"></a>OSSchedUnlock</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, os_core.o(i.OSSchedUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[124]"></a>OSSemCreate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_sem.o(i.OSSemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[126]"></a>OSSemPend</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, os_sem.o(i.OSSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtk_date_task
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oem_rtcm_task
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_date_task
</UL>

<P><STRONG><a name="[129]"></a>OSSemPost</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, os_sem.o(i.OSSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_IRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>OSStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[142]"></a>OSTCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTCBInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[12d]"></a>OSTaskCreate</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, os_task.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>OSTaskCreateExt</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, os_task.o(i.OSTaskCreateExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
</UL>

<P><STRONG><a name="[143]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[132]"></a>OSTaskDel</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, os_task.o(i.OSTaskDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = OSTaskDel &rArr; OS_FlagUnlink
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[135]"></a>OSTaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskDelHook))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[144]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[136]"></a>OSTaskNameSet</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, os_task.o(i.OSTaskNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
</UL>

<P><STRONG><a name="[145]"></a>OSTaskReturnHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskReturnHook))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[146]"></a>OSTaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskStatHook))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[137]"></a>OSTaskStkChk</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, os_task.o(i.OSTaskStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[12e]"></a>OSTaskStkInit</STRONG> (Thumb, 426 bytes, Stack size 16 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[138]"></a>OSTaskSuspend</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, os_task.o(i.OSTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[88]"></a>OSTaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[139]"></a>OSTimeDly</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[10d]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, os_time.o(i.OSTimeDlyHMSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reg
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OEM_Init_output
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_creg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickit_task
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtk_date_task
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcm_task
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_task
</UL>

<P><STRONG><a name="[13a]"></a>OSTimeTick</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, os_core.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[13b]"></a>OSTimeTickHook</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[13c]"></a>OSTmrSignal</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_tmr.o(i.OSTmrSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[11a]"></a>OSTmr_Init</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, os_tmr.o(i.OSTmr_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[134]"></a>OS_Dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_core.o(i.OS_Dummy))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[12a]"></a>OS_EventTaskRdy</STRONG> (Thumb, 114 bytes, Stack size 36 bytes, os_core.o(i.OS_EventTaskRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>

<P><STRONG><a name="[128]"></a>OS_EventTaskRemove</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, os_core.o(i.OS_EventTaskRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[127]"></a>OS_EventTaskWait</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(i.OS_EventTaskWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[125]"></a>OS_EventWaitListInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(i.OS_EventWaitListInit))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>

<P><STRONG><a name="[116]"></a>OS_FlagInit</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, os_flag.o(i.OS_FlagInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[133]"></a>OS_FlagUnlink</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, os_flag.o(i.OS_FlagUnlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[13d]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(i.OS_MemClr))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[117]"></a>OS_QInit</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, os_q.o(i.OS_QInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[123]"></a>OS_Sched</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, os_core.o(i.OS_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
</UL>

<P><STRONG><a name="[12f]"></a>OS_TCBInit</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, os_core.o(i.OS_TCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[90]"></a>OS_TaskIdle</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskIdle))
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskIdle)
</UL>
<P><STRONG><a name="[8e]"></a>OS_TaskReturn</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_task.o(i.OS_TaskReturn))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = OS_TaskReturn &rArr; OSTaskDel &rArr; OS_FlagUnlink
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(i.OSTaskStkInit)
</UL>
<P><STRONG><a name="[91]"></a>OS_TaskStat</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskStat)
</UL>
<P><STRONG><a name="[147]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, os_core.o(i.OS_TaskStatStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[131]"></a>OS_TaskStkClr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskStkClr))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[70]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_usr.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OTG_FS_IRQHandler &rArr; USBH_OTG_ISR_Handler &rArr; USB_OTG_USBH_handle_hc_ISR &rArr; USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
</UL>
<BR>[Address Reference Count : 11]<UL><LI> iic.o(.data)
<LI> uart.o(.data)
<LI> fm25v.o(.data)
<LI> mpu9250.o(.data)
<LI> led.o(.data)
<LI> key.o(.data)
<LI> souce.o(.data)
<LI> rtk_base.o(.data)
<LI> esp32.o(.data)
<LI> socket.o(.data)
<LI> main.o(.data)
</UL>
<P><STRONG><a name="[1cb]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[1f]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR>[Address Reference Count : 11]<UL><LI> iic.o(.data)
<LI> uart.o(.data)
<LI> fm25v.o(.data)
<LI> mpu9250.o(.data)
<LI> led.o(.data)
<LI> key.o(.data)
<LI> souce.o(.data)
<LI> rtk_base.o(.data)
<LI> esp32.o(.data)
<LI> socket.o(.data)
<LI> main.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR>[Address Reference Count : 10]<UL><LI> iic.o(.data)
<LI> fm25v.o(.data)
<LI> mpu9250.o(.data)
<LI> led.o(.data)
<LI> key.o(.data)
<LI> souce.o(.data)
<LI> rtk_base.o(.data)
<LI> esp32.o(.data)
<LI> socket.o(.data)
<LI> main.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
</UL>
<BR>[Address Reference Count : 10]<UL><LI> uart.o(.data)
<LI> fm25v.o(.data)
<LI> mpu9250.o(.data)
<LI> led.o(.data)
<LI> key.o(.data)
<LI> souce.o(.data)
<LI> rtk_base.o(.data)
<LI> esp32.o(.data)
<LI> socket.o(.data)
<LI> main.o(.data)
</UL>
<P><STRONG><a name="[150]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
</UL>

<P><STRONG><a name="[182]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycleCounterInit
</UL>

<P><STRONG><a name="[149]"></a>RTK_BASE_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rtk_base.o(i.RTK_BASE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = RTK_BASE_Init &rArr; UARTx_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtk_date_task
</UL>

<P><STRONG><a name="[232]"></a>RTK_tick_time</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rtk_base.o(i.RTK_tick_time))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickit_task
</UL>

<P><STRONG><a name="[d9]"></a>SDIO_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[166]"></a>SDIO_ClockCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[169]"></a>SDIO_DMACmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[ea]"></a>SDIO_DataConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_DataConfig))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[14f]"></a>SDIO_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[db]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetCommandResponse))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[d8]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[15d]"></a>SDIO_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[dc]"></a>SDIO_GetResponse</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[168]"></a>SDIO_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[153]"></a>SDIO_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[eb]"></a>SDIO_ReadData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[e9]"></a>SDIO_SendCommand</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_SendCommand))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[165]"></a>SDIO_SetPowerState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_SetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[151]"></a>SD_Detect</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32_eval_sdio_sd.o(i.SD_Detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_Detect
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>

<P><STRONG><a name="[152]"></a>SD_EnableWideBusOperation</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32_eval_sdio_sd.o(i.SD_EnableWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[15b]"></a>SD_GetCardInfo</STRONG> (Thumb, 778 bytes, Stack size 12 bytes, stm32_eval_sdio_sd.o(i.SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[154]"></a>SD_GetState</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32_eval_sdio_sd.o(i.SD_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_GetState &rArr; SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Detect
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>

<P><STRONG><a name="[156]"></a>SD_GetStatus</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32_eval_sdio_sd.o(i.SD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_GetStatus &rArr; SD_GetState &rArr; SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>

<P><STRONG><a name="[157]"></a>SD_Init</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, stm32_eval_sdio_sd.o(i.SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15a]"></a>SD_InitializeCards</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, stm32_eval_sdio_sd.o(i.SD_InitializeCards))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_InitializeCards &rArr; CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[15e]"></a>SD_LowLevel_DMA_RxConfig</STRONG> (Thumb, 132 bytes, Stack size 72 bytes, stm32_eval_sdio_sd.o(i.SD_LowLevel_DMA_RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SD_LowLevel_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[163]"></a>SD_LowLevel_DMA_TxConfig</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, stm32_eval_sdio_sd.o(i.SD_LowLevel_DMA_TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SD_LowLevel_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[158]"></a>SD_LowLevel_Init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32_eval_sdio_sd.o(i.SD_LowLevel_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SD_LowLevel_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[159]"></a>SD_PowerON</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, stm32_eval_sdio_sd.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_PowerON &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[167]"></a>SD_ReadBlock</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, stm32_eval_sdio_sd.o(i.SD_ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SD_ReadBlock &rArr; SD_LowLevel_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[15c]"></a>SD_SelectDeselect</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32_eval_sdio_sd.o(i.SD_SelectDeselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_SelectDeselect &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[155]"></a>SD_SendStatus</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32_eval_sdio_sd.o(i.SD_SendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>

<P><STRONG><a name="[16a]"></a>SD_WriteBlock</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, stm32_eval_sdio_sd.o(i.SD_WriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SD_WriteBlock &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16b]"></a>SOUNCE_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, souce.o(i.SOUNCE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SOUNCE_Init &rArr; UARTx_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[170]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
</UL>

<P><STRONG><a name="[16c]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>

<P><STRONG><a name="[16e]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>

<P><STRONG><a name="[16d]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>

<P><STRONG><a name="[16f]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
</UL>

<P><STRONG><a name="[ee]"></a>SPI_ReadWriteByte</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, spi.o(i.SPI_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu9250_Write_Reg
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fram_read
</UL>

<P><STRONG><a name="[108]"></a>SPIx_Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, spi.o(i.SPIx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SPIx_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm25v_init
</UL>

<P><STRONG><a name="[109]"></a>SPIx_Init_Cs</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, spi.o(i.SPIx_Init_Cs))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SPIx_Init_Cs &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm25v_init
</UL>

<P><STRONG><a name="[29]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SysTick_Handler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, times.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;times_tick
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;times_Flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>UART4_IRQHandler</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, esp32.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = UART4_IRQHandler &rArr; ESP_uart_buff &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_uart_buff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>UART8_IRQHandler</STRONG> (Thumb, 1248 bytes, Stack size 16 bytes, rtk_base.o(i.UART8_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = UART8_IRQHandler &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[14d]"></a>UART_SendString</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, uart.o(i.UART_SendString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_SendString
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_send_comd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_send_cmd
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_creg
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_command
</UL>

<P><STRONG><a name="[14a]"></a>UARTx_Init</STRONG> (Thumb, 406 bytes, Stack size 40 bytes, uart.o(i.UARTx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = UARTx_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Esp_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_BASE_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOUNCE_Init
</UL>

<P><STRONG><a name="[52]"></a>USART1_IRQHandler</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, socket.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; qxwz_on_soc_data_received &rArr; qxwz_soc_error &rArr; qxwz_ntrip_disconnect &rArr; qxwz_soc_close &rArr; send_at_command &rArr; gsm_ack_exception &rArr;  qxwz_soc_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_on_soc_data_received
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_recv_exception
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_uart_buf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USART3_IRQHandler</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, rtk_base.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = USART3_IRQHandler &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[17c]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Init
</UL>

<P><STRONG><a name="[17e]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Init
</UL>

<P><STRONG><a name="[178]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_SendBytes
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendString
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_command
</UL>

<P><STRONG><a name="[175]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[17b]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Init
</UL>

<P><STRONG><a name="[17a]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Init
</UL>

<P><STRONG><a name="[176]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[177]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_SendBytes
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendString
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_command
</UL>

<P><STRONG><a name="[183]"></a>USARTx_SendBytes</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, uart.o(i.USARTx_SendBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USARTx_SendBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_date_task
</UL>

<P><STRONG><a name="[184]"></a>USBH_Alloc_Channel</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbh_hcs.o(i.USBH_Alloc_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_Alloc_Channel
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetFreeChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
</UL>

<P><STRONG><a name="[186]"></a>USBH_BulkReceiveData</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usbh_ioreq.o(i.USBH_BulkReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[187]"></a>USBH_BulkSendData</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, usbh_ioreq.o(i.USBH_BulkSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[188]"></a>USBH_ClrFeature</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, usbh_stdreq.o(i.USBH_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_ClrFeature &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Abort
</UL>

<P><STRONG><a name="[1b]"></a>USBH_Connected</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_Connected))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[18a]"></a>USBH_CtlReceiveData</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usbh_ioreq.o(i.USBH_CtlReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBH_CtlReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[189]"></a>USBH_CtlReq</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usbh_ioreq.o(i.USBH_CtlReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SubmitSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GETMaxLUN
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
</UL>

<P><STRONG><a name="[18c]"></a>USBH_CtlSendData</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, usbh_ioreq.o(i.USBH_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBH_CtlSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[18d]"></a>USBH_CtlSendSetup</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usbh_ioreq.o(i.USBH_CtlSendSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBH_CtlSendSetup &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[1c6]"></a>USBH_DeAllocate_AllChannel</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbh_hcs.o(i.USBH_DeAllocate_AllChannel))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[18e]"></a>USBH_DeInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Free_Channel
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[1c]"></a>USBH_Disconnected</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbh_core.o(i.USBH_Disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_Disconnected &rArr; USB_OTG_DisableGlobalInt
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DisableGlobalInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[1c5]"></a>USBH_ErrorHandle</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_ErrorHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_ErrorHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[18f]"></a>USBH_Free_Channel</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbh_hcs.o(i.USBH_Free_Channel))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceDeInit
</UL>

<P><STRONG><a name="[191]"></a>USBH_GetDescriptor</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, usbh_stdreq.o(i.USBH_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>

<P><STRONG><a name="[1bf]"></a>USBH_GetNextDesc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbh_stdreq.o(i.USBH_GetNextDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_GetNextDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[192]"></a>USBH_Get_CfgDesc</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, usbh_stdreq.o(i.USBH_Get_CfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBH_Get_CfgDesc &rArr; USBH_ParseCfgDesc &rArr; USBH_GetNextDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[194]"></a>USBH_Get_DevDesc</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, usbh_stdreq.o(i.USBH_Get_DevDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBH_Get_DevDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseDevDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[196]"></a>USBH_Get_StringDesc</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, usbh_stdreq.o(i.USBH_Get_StringDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseStringDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[198]"></a>USBH_HandleControl</STRONG> (Thumb, 550 bytes, Stack size 24 bytes, usbh_core.o(i.USBH_HandleControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_HandleControl &rArr; USBH_CtlSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetURB_State
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetCurrentFrame
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[1a0]"></a>USBH_Init</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usbh_core.o(i.USBH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBH_Init &rArr; HCD_Init &rArr; USB_OTG_CoreInitHost &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; USB_OTG_BSP_uDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a4]"></a>USBH_MSC_BOT_Abort</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usbh_msc_bot.o(i.USBH_MSC_BOT_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBH_MSC_BOT_Abort &rArr; USBH_ClrFeature &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[1a5]"></a>USBH_MSC_DecodeCSW</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, usbh_msc_bot.o(i.USBH_MSC_DecodeCSW))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_MSC_DecodeCSW
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetXferCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[1ab]"></a>USBH_MSC_ErrorHandle</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, usbh_msc_core.o(i.USBH_MSC_ErrorHandle))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[1ae]"></a>USBH_MSC_HandleBOTXfer</STRONG> (Thumb, 990 bytes, Stack size 32 bytes, usbh_msc_bot.o(i.USBH_MSC_HandleBOTXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetURB_State
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkReceiveData
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DecodeCSW
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UDISK_Write
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UDISK_Read
</UL>

<P><STRONG><a name="[1a9]"></a>USBH_MSC_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbh_msc_bot.o(i.USBH_MSC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_MSC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[1ad]"></a>USBH_MSC_ModeSense6</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_ModeSense6))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_ModeSense6
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[1b2]"></a>USBH_MSC_Read10</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, usbh_msc_scsi.o(i.USBH_MSC_Read10))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_MSC_Read10
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UDISK_Read
</UL>

<P><STRONG><a name="[1ac]"></a>USBH_MSC_ReadCapacity10</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_ReadCapacity10))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_ReadCapacity10
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[1af]"></a>USBH_MSC_RequestSense</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_RequestSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_RequestSense
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[1aa]"></a>USBH_MSC_TestUnitReady</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_TestUnitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_TestUnitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[1b3]"></a>USBH_MSC_Write10</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, usbh_msc_scsi.o(i.USBH_MSC_Write10))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_MSC_Write10
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UDISK_Write
</UL>

<P><STRONG><a name="[19c]"></a>USBH_Modify_Channel</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usbh_hcs.o(i.USBH_Modify_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBH_Modify_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[148]"></a>USBH_OTG_ISR_Handler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, usb_hcd_int.o(i.USBH_OTG_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBH_OTG_ISR_Handler &rArr; USB_OTG_USBH_handle_hc_ISR &rArr; USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_sof_ISR
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_rx_qlvl_ISR
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_ptxfempty_ISR
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_nptxfempty_ISR
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_Disconnect_ISR
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadCoreItr
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsHostMode
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[1b1]"></a>USBH_Open_Channel</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, usbh_hcs.o(i.USBH_Open_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBH_Open_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
</UL>

<P><STRONG><a name="[193]"></a>USBH_ParseCfgDesc</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, usbh_stdreq.o(i.USBH_ParseCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBH_ParseCfgDesc &rArr; USBH_GetNextDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetNextDesc
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseInterfaceDesc
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseEPDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>

<P><STRONG><a name="[1e]"></a>USBH_PortDisabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_PortDisabled))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>USBH_PortEnabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_PortEnabled))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[1c2]"></a>USBH_Process</STRONG> (Thumb, 468 bytes, Stack size 24 bytes, usbh_core.o(i.USBH_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_CfgDesc &rArr; USBH_ParseCfgDesc &rArr; USBH_GetNextDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_ResetPort
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsPortEnabled
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetCurrentSpeed
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeAllocate_AllChannel
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ErrorHandle
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickit_task
</UL>

<P><STRONG><a name="[1a]"></a>USBH_SOF</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_SOF))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[19d]"></a>USBH_SetAddress</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbh_stdreq.o(i.USBH_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_SetAddress &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[19f]"></a>USBH_SetCfg</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbh_stdreq.o(i.USBH_SetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_SetCfg &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[1c7]"></a>USBH_UDISK_Read</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usbh_usr.o(i.USBH_UDISK_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = USBH_UDISK_Read &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read10
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[1c8]"></a>USBH_UDISK_Status</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_UDISK_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_UDISK_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[1c9]"></a>USBH_UDISK_Write</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usbh_usr.o(i.USBH_UDISK_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write10
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[d]"></a>USBH_USR_Configuration_DescAvailable</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, usbh_usr.o(i.USBH_USR_Configuration_DescAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = USBH_USR_Configuration_DescAvailable &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>USBH_USR_DeInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_USR_DeInit))
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>USBH_USR_DeviceAddressAssigned</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_DeviceAddressAssigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = USBH_USR_DeviceAddressAssigned &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>USBH_USR_DeviceAttached</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_DeviceAttached))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = USBH_USR_DeviceAttached &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>USBH_USR_DeviceDisconnected</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_DeviceDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = USBH_USR_DeviceDisconnected &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>USBH_USR_DeviceNotSupported</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_DeviceNotSupported))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = USBH_USR_DeviceNotSupported &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>USBH_USR_DeviceSpeedDetected</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_DeviceSpeedDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = USBH_USR_DeviceSpeedDetected &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>USBH_USR_Device_DescAvailable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbh_usr.o(i.USBH_USR_Device_DescAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = USBH_USR_Device_DescAvailable &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>USBH_USR_EnumerationDone</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_EnumerationDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = USBH_USR_EnumerationDone &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>USBH_USR_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = USBH_USR_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>USBH_USR_MSC_Application</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_MSC_Application))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = USBH_USR_MSC_Application &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USH_User_App
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>USBH_USR_Manufacturer_String</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_Manufacturer_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = USBH_USR_Manufacturer_String &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>USBH_USR_OverCurrentDetected</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_OverCurrentDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = USBH_USR_OverCurrentDetected &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>USBH_USR_Product_String</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_Product_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = USBH_USR_Product_String &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>USBH_USR_ResetDevice</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_ResetDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = USBH_USR_ResetDevice &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>USBH_USR_SerialNum_String</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_SerialNum_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = USBH_USR_SerialNum_String &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>USBH_USR_UnrecoveredError</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_UnrecoveredError))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = USBH_USR_UnrecoveredError &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>USBH_USR_UserInput</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_UserInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = USBH_USR_UserInput &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[1a2]"></a>USB_OTG_BSP_ConfigVBUS</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_bsp.o(i.USB_OTG_BSP_ConfigVBUS))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[190]"></a>USB_OTG_BSP_DriveVBUS</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_bsp.o(i.USB_OTG_BSP_DriveVBUS))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Disconnected
</UL>

<P><STRONG><a name="[1a3]"></a>USB_OTG_BSP_EnableInterrupt</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usb_bsp.o(i.USB_OTG_BSP_EnableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_BSP_EnableInterrupt &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[1a1]"></a>USB_OTG_BSP_Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, usb_bsp.o(i.USB_OTG_BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USB_OTG_BSP_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[19e]"></a>USB_OTG_BSP_mDelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_OTG_BSP_mDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_BSP_mDelay &rArr; USB_OTG_BSP_uDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[1cc]"></a>USB_OTG_BSP_uDelay</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_OTG_BSP_uDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
</UL>

<P><STRONG><a name="[fb]"></a>USB_OTG_CoreInit</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_OTG_CoreInit &rArr; USB_OTG_CoreReset &rArr; USB_OTG_BSP_uDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[fd]"></a>USB_OTG_CoreInitHost</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, usb_core.o(i.USB_OTG_CoreInitHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_OTG_CoreInitHost &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; USB_OTG_BSP_uDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitFSLSPClkSel
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableHostInt
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[fa]"></a>USB_OTG_DisableGlobalInt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_DisableGlobalInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_DisableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Disconnected
</UL>

<P><STRONG><a name="[1d1]"></a>USB_OTG_DriveVbus</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_DriveVbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_DriveVbus &rArr; USB_OTG_BSP_mDelay &rArr; USB_OTG_BSP_uDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHPRT0
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[fe]"></a>USB_OTG_EnableGlobalInt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_EnableGlobalInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_EnableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[1d2]"></a>USB_OTG_EnableHostInt</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EnableHostInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_EnableHostInt &rArr; USB_OTG_EnableCommonInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableCommonInt
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[1d0]"></a>USB_OTG_FlushRxFifo</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_FlushRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_FlushRxFifo &rArr; USB_OTG_BSP_uDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[1cf]"></a>USB_OTG_FlushTxFifo</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[1d7]"></a>USB_OTG_GetMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsHostMode
</UL>

<P><STRONG><a name="[1db]"></a>USB_OTG_HC_DoPing</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_HC_DoPing))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_HC_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
</UL>

<P><STRONG><a name="[1b0]"></a>USB_OTG_HC_Halt</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, usb_core.o(i.USB_OTG_HC_Halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_In_ISR
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceDeInit
</UL>

<P><STRONG><a name="[1b4]"></a>USB_OTG_HC_Init</STRONG> (Thumb, 568 bytes, Stack size 28 bytes, usb_core.o(i.USB_OTG_HC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Modify_Channel
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
</UL>

<P><STRONG><a name="[102]"></a>USB_OTG_HC_StartXfer</STRONG> (Thumb, 502 bytes, Stack size 60 bytes, usb_core.o(i.USB_OTG_HC_StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsEvenFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>

<P><STRONG><a name="[1ce]"></a>USB_OTG_InitFSLSPClkSel</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_InitFSLSPClkSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_InitFSLSPClkSel
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[1d5]"></a>USB_OTG_IsEvenFrame</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_IsEvenFrame))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
</UL>

<P><STRONG><a name="[1b5]"></a>USB_OTG_IsHostMode</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, usb_core.o(i.USB_OTG_IsHostMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_OTG_IsHostMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1b6]"></a>USB_OTG_ReadCoreItr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadCoreItr))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1d3]"></a>USB_OTG_ReadHPRT0</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_ReadHPRT0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_ReadHPRT0
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
</UL>

<P><STRONG><a name="[1d8]"></a>USB_OTG_ReadHostAllChannels_intr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadHostAllChannels_intr))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[1dc]"></a>USB_OTG_ReadPacket</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_rx_qlvl_ISR
</UL>

<P><STRONG><a name="[100]"></a>USB_OTG_ResetPort</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; USB_OTG_BSP_uDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHPRT0
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_ResetPort
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[f9]"></a>USB_OTG_SelectCore</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_SelectCore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_SelectCore
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[fc]"></a>USB_OTG_SetCurrentMode</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_OTG_SetCurrentMode &rArr; USB_OTG_BSP_mDelay &rArr; USB_OTG_BSP_uDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[1d6]"></a>USB_OTG_WritePacket</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_ptxfempty_ISR
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_nptxfempty_ISR
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
</UL>

<P><STRONG><a name="[1ca]"></a>USH_User_App</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_usr.o(i.USH_User_App))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_MSC_Application
</UL>

<P><STRONG><a name="[28]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[1dd]"></a>Wifi_Esp_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, esp32.o(i.Wifi_Esp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Wifi_Esp_Init &rArr; UARTx_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_date_task
</UL>

<P><STRONG><a name="[c0]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[b5]"></a>_sys_exit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1de]"></a>async_notify</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, socket.o(i.async_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296 + Unknown Stack Size
<LI>Call Chain = async_notify &rArr; qxwz_soc_connect_complete &rArr; qxwz_soc_send &rArr; qxwz_soc_error &rArr; qxwz_ntrip_disconnect &rArr; qxwz_soc_close &rArr; send_at_command &rArr; gsm_ack_exception &rArr;  qxwz_soc_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_send_complete
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_connect_complete
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_close_complete
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_prefs_flags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcm_task
</UL>

<P><STRONG><a name="[1e6]"></a>cycleCounterInit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, times.o(i.cycleCounterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cycleCounterInit &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e7]"></a>disk_initialize</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = disk_initialize &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UDISK_Status
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1e8]"></a>disk_read</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = disk_read &rArr; USBH_UDISK_Read &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UDISK_Read
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[1e9]"></a>disk_status</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, diskio.o(i.disk_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = disk_status &rArr; SD_GetStatus &rArr; SD_GetState &rArr; SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1ea]"></a>disk_write</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UDISK_Write
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>

<P><STRONG><a name="[99]"></a>esp_date_task</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, main.o(i.esp_date_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = esp_date_task &rArr; wifi_reg &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_SendBytes
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reg
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Esp_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clean_ESP_date
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OEM_RTK_BASE
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Out
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[1ed]"></a>f_mount</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f1]"></a>fm25v_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fm25v.o(i.fm25v_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = fm25v_init &rArr; SPIx_Init_Cs &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init_Cs
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[22a]"></a>get_gga_send_glag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ntrip.o(i.get_gga_send_glag))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_send_complete
</UL>

<P><STRONG><a name="[224]"></a>get_httprequest_flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, httprequest.o(i.get_httprequest_flag))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_send_complete
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_connect_complete
</UL>

<P><STRONG><a name="[225]"></a>get_httprequest_retry_cb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, httprequest.o(i.get_httprequest_retry_cb))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_send_complete
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_connect_complete
</UL>

<P><STRONG><a name="[227]"></a>get_ntrip_connect_status</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ntrip.o(i.get_ntrip_connect_status))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_error
</UL>

<P><STRONG><a name="[228]"></a>get_ntrip_header_send_flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ntrip.o(i.get_ntrip_header_send_flag))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_send_complete
</UL>

<P><STRONG><a name="[21f]"></a>get_qxwz_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, qxwz_rtcm.o(i.get_qxwz_config))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_send_header
</UL>

<P><STRONG><a name="[21d]"></a>get_sdk_timestamp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, qxwz_rtcm.o(i.get_sdk_timestamp))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_send_header
</UL>

<P><STRONG><a name="[210]"></a>get_soc_close_status</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, qxwz_socket.o(i.get_soc_close_status))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_connect
</UL>

<P><STRONG><a name="[1f8]"></a>isc_hmacsha384_init</STRONG> (Thumb, 120 bytes, Stack size 360 bytes, sha384.o(i.isc_hmacsha384_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = isc_hmacsha384_init &rArr; isc_sha384_final &rArr; isc_sha512_last &rArr; isc_sha512_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_sha384_update
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_sha384_init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_sha384_final
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_sign_sha384
</UL>

<P><STRONG><a name="[1fd]"></a>isc_hmacsha384_sign</STRONG> (Thumb, 110 bytes, Stack size 200 bytes, sha384.o(i.isc_hmacsha384_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = isc_hmacsha384_sign &rArr; isc_sha384_final &rArr; isc_sha512_last &rArr; isc_sha512_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_sha384_update
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_sha384_init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_sha384_final
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_sign_sha384
</UL>

<P><STRONG><a name="[1fe]"></a>isc_hmacsha384_update</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sha384.o(i.isc_hmacsha384_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = isc_hmacsha384_update &rArr; isc_sha384_update &rArr; isc_sha512_update &rArr; isc_sha512_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_sha384_update
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_sign_sha384
</UL>

<P><STRONG><a name="[1fb]"></a>isc_sha384_final</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, sha384.o(i.isc_sha384_final))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = isc_sha384_final &rArr; isc_sha512_last &rArr; isc_sha512_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_sha512_last
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_hmacsha384_sign
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_hmacsha384_init
</UL>

<P><STRONG><a name="[1f9]"></a>isc_sha384_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sha384.o(i.isc_sha384_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isc_sha384_init &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_hmacsha384_sign
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_hmacsha384_init
</UL>

<P><STRONG><a name="[1fa]"></a>isc_sha384_update</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sha384.o(i.isc_sha384_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = isc_sha384_update &rArr; isc_sha512_update &rArr; isc_sha512_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_sha512_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_hmacsha384_update
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_hmacsha384_sign
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_hmacsha384_init
</UL>

<P><STRONG><a name="[1ff]"></a>isc_sha512_last</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, sha384.o(i.isc_sha512_last))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = isc_sha512_last &rArr; isc_sha512_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_sha512_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_sha384_final
</UL>

<P><STRONG><a name="[202]"></a>isc_sha512_transform</STRONG> (Thumb, 9346 bytes, Stack size 124 bytes, sha384.o(i.isc_sha512_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = isc_sha512_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_sha512_update
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_sha512_last
</UL>

<P><STRONG><a name="[200]"></a>isc_sha512_update</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, sha384.o(i.isc_sha512_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = isc_sha512_update &rArr; isc_sha512_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_sha512_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_sha384_update
</UL>

<P><STRONG><a name="[96]"></a>key_task</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.key_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = key_task &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[95]"></a>led_task</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(i.led_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = led_task &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Out
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fram_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[b0]"></a>main</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = main &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycleCounterInit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOUNCE_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Out
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm25v_init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[21e]"></a>makekvpair</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, httprequest.o(i.makekvpair))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = makekvpair
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_send_header
</UL>

<P><STRONG><a name="[97]"></a>oem_rtcm_task</STRONG> (Thumb, 422 bytes, Stack size 8 bytes, main.o(i.oem_rtcm_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248 + Unknown Stack Size
<LI>Call Chain = oem_rtcm_task &rArr; wifi_soc_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_soc_send
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Octets
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[206]"></a>qxwz_api_sign</STRONG> (Thumb, 210 bytes, Stack size 648 bytes, qxwz_webservice.o(i.qxwz_api_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 1596 + Unknown Stack Size
<LI>Call Chain = qxwz_api_sign &rArr; qxwz_sign_sha384 &rArr; isc_hmacsha384_init &rArr; isc_sha384_final &rArr; isc_sha512_last &rArr; isc_sha512_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_sign_sha384
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntrip_auth_sign
</UL>

<P><STRONG><a name="[219]"></a>qxwz_ntrip_disconnect</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ntrip.o(i.qxwz_ntrip_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = qxwz_ntrip_disconnect &rArr; qxwz_soc_close &rArr; send_at_command &rArr; gsm_ack_exception &rArr;  qxwz_soc_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_close
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_report_status
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_remove_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_error
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_on_data_received
</UL>

<P><STRONG><a name="[93]"></a>qxwz_ntrip_on_data_received</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, ntrip.o(i.qxwz_ntrip_on_data_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = qxwz_ntrip_on_data_received &rArr; qxwz_ntrip_handle_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_report_status
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_handle_data
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_disconnect
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ntrip.o(i.qxwz_ntrip_connect)
</UL>
<P><STRONG><a name="[222]"></a>qxwz_ntrip_tick</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, ntrip.o(i.qxwz_ntrip_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 2604 + Unknown Stack Size
<LI>Call Chain = qxwz_ntrip_tick &rArr; qxwz_ntrip_connect &rArr; qxwz_ntrip_send_header &rArr; ntrip_auth_sign &rArr; qxwz_api_sign &rArr; qxwz_sign_sha384 &rArr; isc_hmacsha384_init &rArr; isc_sha384_final &rArr; isc_sha512_last &rArr; isc_sha512_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_prefs_flags_get
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_connect
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_tick
</UL>

<P><STRONG><a name="[180]"></a>qxwz_on_soc_data_received</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, qxwz_socket.o(i.qxwz_on_soc_data_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = qxwz_on_soc_data_received &rArr; qxwz_soc_error &rArr; qxwz_ntrip_disconnect &rArr; qxwz_soc_close &rArr; send_at_command &rArr; gsm_ack_exception &rArr;  qxwz_soc_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_error
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1df]"></a>qxwz_prefs_flags_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, prefs.o(i.qxwz_prefs_flags_get))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_send
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_connect
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_close
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_notify
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_uart_buf
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_send_header
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_connect
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_local_connect
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_local_close
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_tick
</UL>

<P><STRONG><a name="[20d]"></a>qxwz_sign_sha384</STRONG> (Thumb, 98 bytes, Stack size 408 bytes, sha384.o(i.qxwz_sign_sha384))
<BR><BR>[Stack]<UL><LI>Max Depth = 948 + Unknown Stack Size
<LI>Call Chain = qxwz_sign_sha384 &rArr; isc_hmacsha384_init &rArr; isc_sha384_final &rArr; isc_sha512_last &rArr; isc_sha512_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_hmacsha384_update
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_hmacsha384_sign
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isc_hmacsha384_init
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_api_sign
</UL>

<P><STRONG><a name="[21a]"></a>qxwz_soc_close</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, socket.o(i.qxwz_soc_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = qxwz_soc_close &rArr; send_at_command &rArr; gsm_ack_exception &rArr;  qxwz_soc_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_prefs_flags_get
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_command
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_disconnect
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_getcallback
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_local_close
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcm_task
</UL>

<P><STRONG><a name="[1e2]"></a>qxwz_soc_close_complete</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, qxwz_socket.o(i.qxwz_soc_close_complete))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_notify
</UL>

<P><STRONG><a name="[223]"></a>qxwz_soc_connect</STRONG> (Thumb, 86 bytes, Stack size 224 bytes, socket.o(i.qxwz_soc_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = qxwz_soc_connect &rArr; send_at_command &rArr; gsm_ack_exception &rArr;  qxwz_soc_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_prefs_flags_get
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_command
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_local_connect
</UL>

<P><STRONG><a name="[1e0]"></a>qxwz_soc_connect_complete</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, qxwz_socket.o(i.qxwz_soc_connect_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288 + Unknown Stack Size
<LI>Call Chain = qxwz_soc_connect_complete &rArr; qxwz_soc_send &rArr; qxwz_soc_error &rArr; qxwz_ntrip_disconnect &rArr; qxwz_soc_close &rArr; send_at_command &rArr; gsm_ack_exception &rArr;  qxwz_soc_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_send
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ntrip_connecting_flag
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_httprequest_retry_cb
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_httprequest_flag
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_local_close
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_notify
</UL>

<P><STRONG><a name="[213]"></a>qxwz_soc_create</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, socket.o(i.qxwz_soc_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = qxwz_soc_create &rArr; qxwz_soc_init &rArr; init_gsm_gprs &rArr; set_ate0 &rArr; send_at_command &rArr; gsm_ack_exception &rArr;  qxwz_soc_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_connect
</UL>

<P><STRONG><a name="[1f3]"></a>qxwz_soc_error</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, qxwz_socket.o(i.qxwz_soc_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = qxwz_soc_error &rArr; qxwz_ntrip_disconnect &rArr; qxwz_soc_close &rArr; send_at_command &rArr; gsm_ack_exception &rArr;  qxwz_soc_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ntrip_connecting_flag
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_disconnect
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ntrip_connect_status
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_on_soc_data_received
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_send
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_recv_exception
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gsm_ack_exception
</UL>

<P><STRONG><a name="[215]"></a>qxwz_soc_local_close</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, qxwz_socket.o(i.qxwz_soc_local_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = qxwz_soc_local_close &rArr; qxwz_soc_close &rArr; send_at_command &rArr; gsm_ack_exception &rArr;  qxwz_soc_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_prefs_flags_get
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_send_complete
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_connect_complete
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_connect
</UL>

<P><STRONG><a name="[214]"></a>qxwz_soc_local_connect</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, qxwz_socket.o(i.qxwz_soc_local_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = qxwz_soc_local_connect &rArr; qxwz_soc_connect &rArr; send_at_command &rArr; gsm_ack_exception &rArr;  qxwz_soc_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_prefs_flags_get
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_connect
</UL>

<P><STRONG><a name="[220]"></a>qxwz_soc_send</STRONG> (Thumb, 136 bytes, Stack size 1048 bytes, socket.o(i.qxwz_soc_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264 + Unknown Stack Size
<LI>Call Chain = qxwz_soc_send &rArr; qxwz_soc_error &rArr; qxwz_ntrip_disconnect &rArr; qxwz_soc_close &rArr; send_at_command &rArr; gsm_ack_exception &rArr;  qxwz_soc_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_error
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_prefs_flags_get
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_command
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_connect_complete
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_send_header
</UL>

<P><STRONG><a name="[1e1]"></a>qxwz_soc_send_complete</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, qxwz_socket.o(i.qxwz_soc_send_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = qxwz_soc_send_complete &rArr; qxwz_soc_local_close &rArr; qxwz_soc_close &rArr; send_at_command &rArr; gsm_ack_exception &rArr;  qxwz_soc_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ntrip_header_send_flag
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ntrip_connecting_flag
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ntrip_connect_status
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gga_send_flag
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ntrip_header_send_flag
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_httprequest_retry_cb
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_httprequest_flag
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gga_send_glag
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_remove_callback
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_local_close
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_notify
</UL>

<P><STRONG><a name="[22c]"></a>qxwz_tick</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, qxwz_rtcm.o(i.qxwz_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 2612 + Unknown Stack Size
<LI>Call Chain = qxwz_tick &rArr; qxwz_ntrip_tick &rArr; qxwz_ntrip_connect &rArr; qxwz_ntrip_send_header &rArr; ntrip_auth_sign &rArr; qxwz_api_sign &rArr; qxwz_sign_sha384 &rArr; isc_hmacsha384_init &rArr; isc_sha384_final &rArr; isc_sha512_last &rArr; isc_sha512_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_tick
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_tick
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcm_callnextsetp_method
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcm_task
</UL>

<P><STRONG><a name="[234]"></a>restart_connect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, socket.o(i.restart_connect))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickit_task
</UL>

<P><STRONG><a name="[22e]"></a>rtcm_callnextsetp_method</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, qxwz_rtcm.o(i.rtcm_callnextsetp_method))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtcm_callnextsetp_method
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_tick
</UL>

<P><STRONG><a name="[9a]"></a>rtcm_task</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, main.o(i.rtcm_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 2612 + Unknown Stack Size
<LI>Call Chain = rtcm_task &rArr; qxwz_tick &rArr; qxwz_ntrip_tick &rArr; qxwz_ntrip_connect &rArr; qxwz_ntrip_send_header &rArr; ntrip_auth_sign &rArr; qxwz_api_sign &rArr; qxwz_sign_sha384 &rArr; isc_hmacsha384_init &rArr; isc_sha384_final &rArr; isc_sha512_last &rArr; isc_sha512_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_close
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_notify
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[235]"></a>rtcm_time_cnt</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, rtk_base.o(i.rtcm_time_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickit_task
</UL>

<P><STRONG><a name="[98]"></a>rtk_date_task</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main.o(i.rtk_date_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248 + Unknown Stack Size
<LI>Call Chain = rtk_date_task &rArr; wifi_soc_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_soc_send
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_BASE_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OEM_Init_output
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[22b]"></a>set_gga_send_flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ntrip.o(i.set_gga_send_flag))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_send_complete
</UL>

<P><STRONG><a name="[20f]"></a>set_httprequest_flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, httprequest.o(i.set_httprequest_flag))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_connect
</UL>

<P><STRONG><a name="[229]"></a>set_ntrip_connect_status</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ntrip.o(i.set_ntrip_connect_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_ntrip_connect_status &rArr; qxwz_ntrip_report_status
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_report_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_send_complete
</UL>

<P><STRONG><a name="[212]"></a>set_ntrip_connecting_flag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ntrip.o(i.set_ntrip_connecting_flag))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_send_complete
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_error
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_connect_complete
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_connect
</UL>

<P><STRONG><a name="[221]"></a>set_ntrip_header_send_flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ntrip.o(i.set_ntrip_header_send_flag))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_send_complete
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_send_header
</UL>

<P><STRONG><a name="[230]"></a>socket_getcallback</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, qxwz_socket.o(i.socket_getcallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = socket_getcallback &rArr; qxwz_soc_close &rArr; send_at_command &rArr; gsm_ack_exception &rArr;  qxwz_soc_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_close
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_remove_callback
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_tick
</UL>

<P><STRONG><a name="[216]"></a>socket_push_callback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, qxwz_socket.o(i.socket_push_callback))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_connect
</UL>

<P><STRONG><a name="[218]"></a>socket_remove_callback</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, qxwz_socket.o(i.socket_remove_callback))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_send_complete
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_connect
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_disconnect
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_getcallback
</UL>

<P><STRONG><a name="[22d]"></a>socket_tick</STRONG> (Thumb, 478 bytes, Stack size 24 bytes, qxwz_socket.o(i.socket_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = socket_tick &rArr; socket_getcallback &rArr; qxwz_soc_close &rArr; send_at_command &rArr; gsm_ack_exception &rArr;  qxwz_soc_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_getcallback
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_tick
</UL>

<P><STRONG><a name="[92]"></a>start_task</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, main.o(i.start_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = start_task &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[ed]"></a>stm32_spi2select</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, spi.o(i.stm32_spi2select))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stm32_spi2select
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fram_read
</UL>

<P><STRONG><a name="[10b]"></a>stm32_spi3select</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, spi.o(i.stm32_spi3select))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stm32_spi3select
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu9250_Write_Reg
</UL>

<P><STRONG><a name="[94]"></a>tickit_task</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, main.o(i.tickit_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tickit_task &rArr; USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_CfgDesc &rArr; USBH_ParseCfgDesc &rArr; USBH_GetNextDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_tick_time
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcm_time_cnt
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_tick_time
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[233]"></a>timer_tick</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, socket.o(i.timer_tick))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickit_task
</UL>

<P><STRONG><a name="[1f6]"></a>wait_creg</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, socket.o(i.wait_creg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = wait_creg &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendString
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_at_ack_timer
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buf
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gsm_gprs
</UL>

<P><STRONG><a name="[1eb]"></a>wifi_reg</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, esp32.o(i.wifi_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = wifi_reg &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_send_comd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_date_task
</UL>

<P><STRONG><a name="[236]"></a>wifi_send_comd</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, esp32.o(i.wifi_send_comd))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = wifi_send_comd &rArr; esp_find_string &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendString
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_find_string
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_cmd_buff
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_soc_send
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reg
</UL>

<P><STRONG><a name="[209]"></a>wifi_soc_send</STRONG> (Thumb, 112 bytes, Stack size 2096 bytes, esp32.o(i.wifi_soc_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 2240 + Unknown Stack Size
<LI>Call Chain = wifi_soc_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_send_comd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtk_date_task
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oem_rtcm_task
</UL>

<P><STRONG><a name="[231]"></a>wifi_tick_time</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, esp32.o(i.wifi_tick_time))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickit_task
</UL>

<P><STRONG><a name="[8d]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[26e]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[26f]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[174]"></a>SetSysClock</STRONG> (Thumb, 272 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1cd]"></a>USB_OTG_CoreReset</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_CoreReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_CoreReset &rArr; USB_OTG_BSP_uDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>

<P><STRONG><a name="[1d4]"></a>USB_OTG_EnableCommonInt</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_EnableCommonInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_EnableCommonInt
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableHostInt
</UL>

<P><STRONG><a name="[1bd]"></a>USB_OTG_USBH_handle_Disconnect_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_Disconnect_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_USBH_handle_Disconnect_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1be]"></a>USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1bb]"></a>USB_OTG_USBH_handle_hc_ISR</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_hc_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USB_OTG_USBH_handle_hc_ISR &rArr; USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_In_ISR
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHostAllChannels_intr
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1d9]"></a>USB_OTG_USBH_handle_hc_n_In_ISR</STRONG> (Thumb, 1054 bytes, Stack size 40 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_hc_n_In_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[1da]"></a>USB_OTG_USBH_handle_hc_n_Out_ISR</STRONG> (Thumb, 952 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_hc_n_Out_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_OTG_USBH_handle_hc_n_Out_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[1b9]"></a>USB_OTG_USBH_handle_nptxfempty_ISR</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_nptxfempty_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_OTG_USBH_handle_nptxfempty_ISR &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1bc]"></a>USB_OTG_USBH_handle_port_ISR</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_port_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_OTG_USBH_handle_port_ISR &rArr; USB_OTG_InitFSLSPClkSel
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitFSLSPClkSel
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1ba]"></a>USB_OTG_USBH_handle_ptxfempty_ISR</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_ptxfempty_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_OTG_USBH_handle_ptxfempty_ISR &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1b8]"></a>USB_OTG_USBH_handle_rx_qlvl_ISR</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_rx_qlvl_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_OTG_USBH_handle_rx_qlvl_ISR &rArr; USB_OTG_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1b7]"></a>USB_OTG_USBH_handle_sof_ISR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_sof_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_USBH_handle_sof_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[18]"></a>USBH_MSC_ClassRequest</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbh_msc_core.o(i.USBH_MSC_ClassRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_MSC_ClassRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[1a8]"></a>USBH_MSC_GETMaxLUN</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbh_msc_core.o(i.USBH_MSC_GETMaxLUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_MSC_GETMaxLUN &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[19]"></a>USBH_MSC_Handle</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, usbh_msc_core.o(i.USBH_MSC_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = USBH_MSC_Handle &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_TestUnitReady
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RequestSense
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ReadCapacity10
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ModeSense6
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ErrorHandle
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GETMaxLUN
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>USBH_MSC_InterfaceDeInit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbh_msc_core.o(i.USBH_MSC_InterfaceDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_MSC_InterfaceDeInit &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Free_Channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>USBH_MSC_InterfaceInit</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, usbh_msc_core.o(i.USBH_MSC_InterfaceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBH_MSC_InterfaceInit &rArr; USBH_Open_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[19b]"></a>USBH_HandleEnum</STRONG> (Thumb, 474 bytes, Stack size 88 bytes, usbh_core.o(i.USBH_HandleEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = USBH_HandleEnum &rArr; USBH_Get_CfgDesc &rArr; USBH_ParseCfgDesc &rArr; USBH_GetNextDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Modify_Channel
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[185]"></a>USBH_GetFreeChannel</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbh_hcs.o(i.USBH_GetFreeChannel))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
</UL>

<P><STRONG><a name="[18b]"></a>USBH_SubmitSetupRequest</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbh_ioreq.o(i.USBH_SubmitSetupRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_SubmitSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>

<P><STRONG><a name="[195]"></a>USBH_ParseDevDesc</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, usbh_stdreq.o(i.USBH_ParseDevDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_ParseDevDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
</UL>

<P><STRONG><a name="[1c1]"></a>USBH_ParseEPDesc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbh_stdreq.o(i.USBH_ParseEPDesc))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[1c0]"></a>USBH_ParseInterfaceDesc</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbh_stdreq.o(i.USBH_ParseInterfaceDesc))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[197]"></a>USBH_ParseStringDesc</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, usbh_stdreq.o(i.USBH_ParseStringDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBH_ParseStringDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
</UL>

<P><STRONG><a name="[115]"></a>OS_InitEventList</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, os_core.o(i.OS_InitEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[112]"></a>OS_InitMisc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(i.OS_InitMisc))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[113]"></a>OS_InitRdyList</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(i.OS_InitRdyList))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[114]"></a>OS_InitTCBList</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, os_core.o(i.OS_InitTCBList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[118]"></a>OS_InitTaskIdle</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[119]"></a>OS_InitTaskStat</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[11e]"></a>OS_SchedNew</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(i.OS_SchedNew))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[13e]"></a>OSTmr_InitTask</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, os_tmr.o(i.OSTmr_InitTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[140]"></a>OSTmr_Link</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, os_tmr.o(i.OSTmr_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTmr_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[8f]"></a>OSTmr_Task</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, os_tmr.o(i.OSTmr_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSTmr_Task &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(i.OSTmr_InitTask)
</UL>
<P><STRONG><a name="[13f]"></a>OSTmr_Unlink</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, os_tmr.o(i.OSTmr_Unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OSTmr_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[172]"></a>times_Flag</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, times.o(i.times_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[171]"></a>times_tick</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, times.o(i.times_tick))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d7]"></a>CmdError</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32_eval_sdio_sd.o(i.CmdError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdError
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[da]"></a>CmdResp1Error</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, stm32_eval_sdio_sd.o(i.CmdResp1Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[dd]"></a>CmdResp2Error</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32_eval_sdio_sd.o(i.CmdResp2Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp2Error
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[de]"></a>CmdResp3Error</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32_eval_sdio_sd.o(i.CmdResp3Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp3Error
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[df]"></a>CmdResp6Error</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, stm32_eval_sdio_sd.o(i.CmdResp6Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[e0]"></a>CmdResp7Error</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32_eval_sdio_sd.o(i.CmdResp7Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp7Error
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[e8]"></a>FindSCR</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, stm32_eval_sdio_sd.o(i.FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>

<P><STRONG><a name="[14e]"></a>SDEnWideBus</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, stm32_eval_sdio_sd.o(i.SDEnWideBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[14c]"></a>RTK_find_string</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtk_base.o(i.RTK_find_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTK_find_string &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_send_cmd
</UL>

<P><STRONG><a name="[10e]"></a>RTK_send_cmd</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, rtk_base.o(i.RTK_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RTK_send_cmd &rArr; RTK_find_string &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendString
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_find_string
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OEM_RTK_BASE
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OEM_Init_output
</UL>

<P><STRONG><a name="[d6]"></a>Clear_cmd_buff</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, esp32.o(i.Clear_cmd_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clear_cmd_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_send_comd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_uart_buff
</UL>

<P><STRONG><a name="[e6]"></a>ESP_uart_buff</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, esp32.o(i.ESP_uart_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ESP_uart_buff &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_cmd_buff
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[1ec]"></a>esp_find_string</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, esp32.o(i.esp_find_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = esp_find_string &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_send_comd
</UL>

<P><STRONG><a name="[1e5]"></a>clear_buf</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, socket.o(i.clear_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_creg
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_command
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_uart_buf
</UL>

<P><STRONG><a name="[1f0]"></a>find_string</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, socket.o(i.find_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = find_string &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_command
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gsm_ack_exception
</UL>

<P><STRONG><a name="[1f2]"></a>gsm_ack_exception</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, socket.o(i.gsm_ack_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = gsm_ack_exception &rArr;  qxwz_soc_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_error
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_string
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_command
</UL>

<P><STRONG><a name="[1f4]"></a>init_gsm_gprs</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, socket.o(i.init_gsm_gprs))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = init_gsm_gprs &rArr; set_ate0 &rArr; send_at_command &rArr; gsm_ack_exception &rArr;  qxwz_soc_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_creg
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ate0
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_command
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_init
</UL>

<P><STRONG><a name="[181]"></a>query_uart_buf</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, socket.o(i.query_uart_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = query_uart_buf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_prefs_flags_get
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buf
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[226]"></a>qxwz_soc_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, socket.o(i.qxwz_soc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = qxwz_soc_init &rArr; init_gsm_gprs &rArr; set_ate0 &rArr; send_at_command &rArr; gsm_ack_exception &rArr;  qxwz_soc_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gsm_gprs
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_create
</UL>

<P><STRONG><a name="[1f5]"></a>send_at_command</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, socket.o(i.send_at_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = send_at_command &rArr; gsm_ack_exception &rArr;  qxwz_soc_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendString
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_at_ack_timer
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gsm_ack_exception
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_string
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_send
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_connect
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_close
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ate0
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gsm_gprs
</UL>

<P><STRONG><a name="[1f7]"></a>set_ate0</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, socket.o(i.set_ate0))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = set_ate0 &rArr; send_at_command &rArr; gsm_ack_exception &rArr;  qxwz_soc_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_command
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gsm_gprs
</UL>

<P><STRONG><a name="[22f]"></a>start_at_ack_timer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, socket.o(i.start_at_ack_timer))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_creg
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_command
</UL>

<P><STRONG><a name="[17f]"></a>uart_recv_exception</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, socket.o(i.uart_recv_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = uart_recv_exception &rArr; qxwz_soc_error &rArr; qxwz_ntrip_disconnect &rArr; qxwz_soc_close &rArr; send_at_command &rArr; gsm_ack_exception &rArr;  qxwz_soc_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_error
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1e3]"></a>check_fs</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1ef]"></a>find_volume</STRONG> (Thumb, 900 bytes, Stack size 88 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[1ee]"></a>get_ldnumber</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1e4]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[204]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[205]"></a>ntrip_auth_sign</STRONG> (Thumb, 138 bytes, Stack size 144 bytes, ntrip.o(i.ntrip_auth_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 1740 + Unknown Stack Size
<LI>Call Chain = ntrip_auth_sign &rArr; qxwz_api_sign &rArr; qxwz_sign_sha384 &rArr; isc_hmacsha384_init &rArr; isc_sha384_final &rArr; isc_sha512_last &rArr; isc_sha512_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_api_sign
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_send_header
</UL>

<P><STRONG><a name="[20e]"></a>qxwz_ntrip_connect</STRONG> (Thumb, 534 bytes, Stack size 24 bytes, ntrip.o(i.qxwz_ntrip_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 2588 + Unknown Stack Size
<LI>Call Chain = qxwz_ntrip_connect &rArr; qxwz_ntrip_send_header &rArr; ntrip_auth_sign &rArr; qxwz_api_sign &rArr; qxwz_sign_sha384 &rArr; isc_hmacsha384_init &rArr; isc_sha384_final &rArr; isc_sha512_last &rArr; isc_sha512_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_prefs_flags_get
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_create
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_send_header
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_report_status
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_httprequest_flag
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ntrip_connecting_flag
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_remove_callback
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_push_callback
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_local_connect
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_local_close
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_soc_close_status
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_tick
</UL>

<P><STRONG><a name="[21b]"></a>qxwz_ntrip_handle_data</STRONG> (Thumb, 482 bytes, Stack size 56 bytes, ntrip.o(i.qxwz_ntrip_handle_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = qxwz_ntrip_handle_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_report_status
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_report_diff_data
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_on_data_received
</UL>

<P><STRONG><a name="[21c]"></a>qxwz_ntrip_report_diff_data</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ntrip.o(i.qxwz_ntrip_report_diff_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = qxwz_ntrip_report_diff_data
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_handle_data
</UL>

<P><STRONG><a name="[211]"></a>qxwz_ntrip_report_status</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ntrip.o(i.qxwz_ntrip_report_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = qxwz_ntrip_report_status
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_on_data_received
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_handle_data
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_connect
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ntrip_connect_status
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_disconnect
</UL>

<P><STRONG><a name="[217]"></a>qxwz_ntrip_send_header</STRONG> (Thumb, 346 bytes, Stack size 824 bytes, ntrip.o(i.qxwz_ntrip_send_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 2564 + Unknown Stack Size
<LI>Call Chain = qxwz_ntrip_send_header &rArr; ntrip_auth_sign &rArr; qxwz_api_sign &rArr; qxwz_sign_sha384 &rArr; isc_hmacsha384_init &rArr; isc_sha384_final &rArr; isc_sha512_last &rArr; isc_sha512_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_prefs_flags_get
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_soc_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntrip_auth_sign
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makekvpair
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ntrip_header_send_flag
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sdk_timestamp
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_qxwz_config
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qxwz_ntrip_connect
</UL>

<P><STRONG><a name="[8b]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
